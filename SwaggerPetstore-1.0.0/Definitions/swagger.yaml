swagger: "2.0"
info:
  version: 1.0.0
  title: SwaggerPetstore
  license:
    name: MIT
host: petstore.swagger.io
basePath: /v1
schemes:
 - http
consumes:
 - application/json
produces:
 - application/json
security:
 -
  default: []
paths:
  /pets:
    get:
      tags:
       - pets
      summary: List all pets v1
      operationId: listPets
      parameters:
       -
        name: limit
        in: query
        description: How many items to return at one time (max 100) Updated
        required: false
        type: integer
        format: int32
      responses:
        "200":
          description: A paged array of pets
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            $ref: '#/definitions/Pets'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
       -
        default: []
      x-auth-type: Application & Application User
      x-wso2-application-security:
        security-types:
         - oauth2
        optional: false
    post:
      tags:
       - pets
      summary: Create a pet
      operationId: createPets
      parameters: []
      responses:
        "201":
          description: Null response
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
       -
        default: []
      x-auth-type: Application & Application User
      x-wso2-application-security:
        security-types:
         - oauth2
        optional: false
  /pets/{petId}:
    get:
      tags:
       - pets
      summary: Info for a specific pet
      operationId: showPetById
      parameters:
       -
        name: petId
        in: path
        description: The id of the pet to retrieve
        required: true
        type: string
      responses:
        "200":
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/Pets'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
      security:
       -
        default: []
      x-auth-type: Application & Application User
      x-wso2-application-security:
        security-types:
         - oauth2
        optional: false
securityDefinitions:
  default:
    type: oauth2
    authorizationUrl: https://test.com
    flow: implicit
    scopes: {}
definitions:
  Error:
    type: object
    required:
     - code
     - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  Pet:
    type: object
    required:
     - id
     - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      tag:
        type: string
  Pets:
    type: array
    items:
      $ref: '#/definitions/Pet'
x-wso2-api-key-header: ApiKey
x-wso2-cors:
  corsConfigurationEnabled: false
  accessControlAllowOrigins:
   - '*'
  accessControlAllowCredentials: false
  accessControlAllowHeaders:
   - authorization
   - Access-Control-Allow-Origin
   - Content-Type
   - SOAPAction
   - apikey
   - Internal-Key
  accessControlAllowMethods:
   - GET
   - PUT
   - POST
   - DELETE
   - PATCH
   - OPTIONS
x-wso2-production-endpoints:
  urls:
   - http://localhost:8080
  type: http
x-wso2-sandbox-endpoints:
  urls:
   - http://localhost:8081
  type: http
x-wso2-basePath: /v1/1.0.0
x-wso2-transports:
 - http
 - https
x-wso2-application-security:
  security-types:
   - oauth2
  optional: false
x-wso2-response-cache:
  enabled: false
  cacheTimeoutInSeconds: 300
